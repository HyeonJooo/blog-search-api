package com.kakaobank.study.mock;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

import com.kakaobank.study.search.model.SearchKeyword;
import com.kakaobank.study.search.service.port.SearchKeywordRepository;

public class FakeSearchKeywordRepository implements SearchKeywordRepository {

	private final AtomicLong autoGeneratedId = new AtomicLong(0);
	private final List<SearchKeyword> data = new ArrayList<>();

	@Override
	public Optional<SearchKeyword> findByKeyword(String keyword) {
		return data.stream()
			.filter(item -> keyword.equals(item.getKeyword()))
			.findAny();
	}

	@Override
	public void save(SearchKeyword searchKeyword) {
		if (searchKeyword.getId() == null || searchKeyword.getId() == 0) {
			SearchKeyword newSearchKeyword = SearchKeyword.builder()
				.id(autoGeneratedId.incrementAndGet())
				.keyword(searchKeyword.getKeyword())
				.count(searchKeyword.getCount())
				.build();

			data.add(newSearchKeyword);
		} else {
			data.removeIf(item -> Objects.equals(item.getId(), searchKeyword.getId()));
			data.add(searchKeyword);
		}
	}

	@Override
	public List<SearchKeyword> findTop10ByOrderByCountDesc() {
		return data.stream()
			.sorted((k1, k2) -> Integer.compare(k2.getCount(), k1.getCount()))
			.limit(10)
			.collect(Collectors.toList());
	}
}
